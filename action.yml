name: "Install Poetry Action"
author: "Sondre LillebÃ¸ Gundersen <sondrelg@live.no>"
description: "Installs and configures Poetry"
branding:
  icon: "package"
  color: "green"
inputs:
  version:
    description: "The Poetry version to install"
    required: true
    default: "latest"
  virtualenvs-create:
    description: "Whether Poetry should create a virtualenv or not"
    required: false
    default: "true"
  virtualenvs-in-project:
    description: "Whether Poetry should create virtualenvs in the project directory or not"
    required: false
    default: "false"
  virtualenvs-path:
    description: "The Poetry virtualenv path"
    required: false
    default: "{cache-dir}/virtualenvs"
  installer-parallel:
    description: "Whether to install many packages at once or one by one. This can fix PyPI DNS resolution errors, but also slows down the installation"
    required: false
    default: "true"
  installation-arguments:
    description: "Arguments passed directly to the Poetry installation script. For example --force."
    required: false
runs:
  using: "composite"
  steps:
    - name: Install and configure Poetry
      run: |
        installation_script="$(mktemp)"
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/48339106eb0d403a3c66519317488c8185844b32/install-poetry.py --output "$installation_script"

        if [ "${{ runner.os }}" == "Windows" ]; then
          path="C:/Users/runneradmin/AppData/Roaming/Python/Scripts"
        else
          path="$HOME/.local/"
        fi

        echo -e "\n\033[33mSetting Poetry installation path as $path\033[0m\n"
        echo -e "\033[33mInstalling Poetry ðŸ‘·\033[0m\n"

        if [ "${{ inputs.version }}" == "latest" ]; then
          POETRY_HOME=$path python3 $installation_script --yes ${{ inputs.installation-arguments}}
        else
          POETRY_HOME=$path python3 $installation_script --yes --version=${{ inputs.version }} ${{ inputs.installation-arguments}}
        fi

        echo "$path/bin" >>$GITHUB_PATH
        export PATH="$path/bin:$PATH"

        if [ "${{ runner.os }}" == "Windows" ]; then
          poetry_="$path/bin/poetry.exe"
        else
          poetry_=poetry
        fi

        $poetry_ config virtualenvs.create ${{ inputs.virtualenvs-create }}
        $poetry_ config virtualenvs.in-project ${{ inputs.virtualenvs-in-project }}
        $poetry_ config virtualenvs.path ${{ inputs.virtualenvs-path }}

        config="$($poetry_ config --list)"

        if echo "$config" | grep -q -c "installer.parallel"; then
          $poetry_ config installer.parallel "${{ inputs.installer-parallel }}"
        fi

        if [ "${{ runner.os }}" == "Windows" ]; then
          act="source .venv/scripts/activate"
          echo "VENV=.venv/scripts/activate" >>"$GITHUB_ENV"
        else
          act="source .venv/bin/activate"
          echo "VENV=.venv/bin/activate" >>"$GITHUB_ENV"
        fi

        echo -e "\n\033[33mInstallation completed. Configuring settings ðŸ› \033[0m"
        echo -e "\n\033[33mDone âœ…\033[0m"

        if [ "${{ inputs.virtualenvs-create }}" == true ] || [ "${{ inputs.virtualenvs-create }}" == "true" ]; then
          echo -e "\n\033[33mIf you are creating a venv in your project, you can activate it by running '$act'. If you're running this in an OS matrix, you can use 'source \$VENV' instead, as an OS agnostic option\033[0m"
        fi
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo -e "\n\033[33mMake sure to set your default shell to bash when on Windows.\033[0m"
          echo -e "\n\033[33mSee the github action docs for more information and examples.\033[0m"
        fi

      shell: bash
